#!/bin/bash -e

tomato () {
    echo -e "\U1F345"
}

say_function () {
    echo "${1}" | festival --tts
}

short_cycle_message () {
    possible_messages=(
    "Short break!"
    "Stand up!"
    "Watch your posture!"
    )
    number_of_possible_messages=3
    echo ${possible_messages[$((RANDOM % number_of_possible_messages))]}
}

long_cycle_message () {
    possible_messages=(
    "LOOOONG BREAK!"
    "Long break. Stand up, take a coffee, look at the window then come back to work."
    "Long break. Please stop working."
    )
    number_of_possible_messages=3
    echo ${possible_messages[$((RANDOM % number_of_possible_messages))]}
}

end_of_rest_message () {
    possible_messages=(
    "End of rest period, get back to work."
    "Your rest period just finished, get back here."
    )
    number_of_possible_messages=2
    echo ${possible_messages[$((RANDOM % number_of_possible_messages))]}
}

message_notification () {
    notify-send "$(tomato) ${1}" --icon=NOTHING
    if [[ ${LOUD} -eq 1 ]]; then
        $(say_function "${1}")
    fi
    echo "$(date) [${2}]: \"${1}\""
}

short_cycle () {
    sleep ${SHORT_CYCLE_LENGHT}
    log_message="$(message_notification "$(short_cycle_message)" "SHORT CYCLE")"
    echo ${log_message}
}

last_short_cycle () {
    sleep ${SHORT_CYCLE_LENGHT}
    log_message="$(message_notification "$(long_cycle_message)" "LONG CYCLE")"
    echo ${log_message}
}

rest_cycle () {
    sleep ${REST_LENGTH}
    log_message="$(message_notification "$(end_of_rest_message)" "REST")"
    echo ${log_message}
}

pomodoro_cycle () {
notify-send "Starting cycles. You will see a notification like this."
while true
do
    for i in $( seq 1 $((${NUMBER_OF_SHORT_CYCLES}-1)) )
    do
        echo "$(short_cycle)"
    done
    echo "$(last_short_cycle)"
    echo "$(rest_cycle)"
done
}

help_message() {
    help_text="
Usage: pomdoro [COMMAND] [OPTION]... 
Start a simple work cycles service.

List of commands
  start           Start the pomodoro service.
  stop            Stop the pomdoro service.

List of options
  -n, --number-of-short-cycles
                  The number of short cycles, after this number of cycles 
                  a short break will happen. Default number of cycles is 4.
  -s, --short-cycle-length
                  The length of the short cycle, in minutes. Default short
                  cycle length is 15 minutes.
  -r, --rest-length
                  The length of the break after the short cycles, in minutes.
                  Default rest length is 5 minutes.
  -l, --loud      Enable the text-to-speech system. It will say out loud the
                  messages. 
  -f, --file      Pomodoro stores the process id in the $HOME/.pomodoroid by
                  default, if you want to store it in another file specify
                  with this flag.
  -h, --help      Show this message.
    "

    echo "${help_text}"
}

SHORT_CYCLE_LENGHT=5 # in minutes
NUMBER_OF_SHORT_CYCLES=4 # The nuber of short breaks until a long break
REST_LENGTH=5 # in minutes
LOUD=0
POMODORO_FILE="${HOME}/.pomodoroid"

# Parsing Arguments
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -n|--number-of-short-cycles)
        NUMBER_OF_SHORT_CYCLES=${2}
        shift # past argument
        shift # past argument
        ;;
        -s|--short-cycle-length)
        SHORT_CYCLE_LENGHT=${2}
        shift # past argument
        shift # past argument
        ;;
        -r|--rest-length)
        REST_LENGTH=${2}
        shift # past argument
        shift # past argument
        ;;
        -l|--loud)
        LOUD=1
        shift # past argument
        ;;
        -f|--file)
        POMODORO_FILE=${2}
        shift # past argument
        shift # past argument
        ;;
        start|stop)
        POSITIONAL+=("$1")
        shift
        ;;
        -h|--help)
        echo $(help_message)
        exit 1
        shift
        ;;
        *)    # unknown option
        echo "Unknown option ${key}. Type pomodoro --help to get more info."
        exit 1
        shift # past argument
        ;;
    esac
done
set -- "${POSITIONAL[@]}"

# echo SHORT_CYCLE_LENGHT = ${SHORT_CYCLE_LENGHT}
# echo NUMBER_OF_SHORT_CYCLES = ${NUMBER_OF_SHORT_CYCLES}
# echo REST_LENGTH = ${REST_LENGTH}
# echo LOUD = ${LOUD}
# echo POMODORO_FILE = ${POMODORO_FILE}
# echo ${1}

case ${1} in 
    start)
        echo "$(pomodoro_cycle)" &
        echo $!> ${POMODORO_FILE}
        echo "$(tomato) Pomodoro started!"
        ;;
    stop)
        if [[ -e ${POMODORO_FILE} ]]; then
            kill "$(cat ${POMODORO_FILE})"
            rm ${POMODORO_FILE}
            echo "$(tomato) Pomodoro stoped!"
        else
            echo "Pomodoro wasnt't running. Run pomodoro start."
        fi
        ;;
    *)
        echo "None of the above."
    ;;
esac
